一、sys
sys可以访问与python解释器联系紧密的变量和函数。

argv
命令行参数，包括传递到python解释器的参数，命令行参数，包括脚本名称

exit([arg])
退出当前的程序，可选参数为给定的返回值或者错误信息（在try/finally中finally同样会执行）。可以提供一个整数作为参数，用来标识程序是否成功运行。

modules
映射模块名字到载入模块的字典。 sys.modules是一个全局字典，该字典是Python启动后就加载在内存中。每当程序员导入新的模块，sys.modules都将记录这些模块。字典sys.modules对于加载模块起到了缓冲的作用。当某个模块第一次导入，字典sys.modules将自动记录该模块。当第二次再导入该模块时，python会直接到字典中查找，从而加快了程序运行的速度。
字典sys.modules具有字典所拥有的一切方法，可以通过这些方法了解当前的环境加载了哪些模块。如sys.modules.keys(),sys.modules.values(),sys.modules["os"]

path
查找模块所在目录的目录名列表，它是一个字符串列表，其中每个字符串都是一个目录名。

platform 
是一个字符串，表示解释器正在其上运行的“平台”名称，操作系统或java虚拟机等。

stdin,stdout,stderr
类文件流对象，标准输入，标准输出和标准错误。

二、os
environ
对环境变量进行映射，比如要访问系统变量PYTHONPATH,可以使用表达式os.environ['PYTHONPATH']。这个映射也可以用来改变系统环境变量，不过并非所有系统都支持。

system（command）
在子shell中执行操作系统命令，用于外部程序。也有一些函数可以执行外部程序，包括execv，它会退出python解释器，并且将控制权交给被执行程序。还有popen，可以创建于程序连接的类文件。

sep
用于路径名中的分隔符。UNIX标准分隔符是“/”,Windows是“\\”

pathsep
分隔路径的分隔符，组织路径的使用可以使用，像PYTHONPATH中已有，UNIX使用“：”，Windows使用“；”

linsep
行分隔符（'\n','\r',or'\r\n'），用于文本文件的字符串分隔符。

urandom（n）
返回n字节的加密强随机数据

三、fileinput
fileinput模块可以轻松遍历文本文件的所有行。
如执行python fileinput.py file1.txt file2.txt file3.txt则import fileinput的py文件可以依次对三个文件进行遍历了。

fileinput.input（file[,input[,backup]]）是其中最重要的函数。它会返回能够用于for循环遍历的对象。如果不想使用默认行为，可以给函数提供一个或多个文件名。还能将inplace参数设为true进行原地处理。对于要访问的每一行，需要打印出替代的内容，以返回到当前的输入文件中。在进行原地处理的时候，可选的backup参数将文件名扩展备份到通过原始文件创建的备份文件中。

fileinput.filename函数返回当前正在处理的文件名

fileinput.lineno返回当前行的行数，但是不会因为处理文件变化而重置

fileinput.filelineno返回当前处理文件的当前行数，新处理文件时重置1重新计数

fileinput.isfirstline当前行是当前文件的第一行时返回true，否则false

fileinput.isstdin 在当前文件为sys.stdin时返回真，否则false

fileinput.nextfile会关闭当前文件，跳到下一个文件，跳过的行并不计。当知道当前文件已经处理完的情况下，这个函数比较有用了，比如每个文件都包含经过排序的单词，当需要找某个词，如果已经在排序中找到了这个词的位置，则可以放心跳到下一个文件。

fileinput.close关闭整个文件链，结束迭代。